# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  tf_version: "1.2.3"
  tf_working_dir: "terraform"
  python_working_dir: "app"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  terraform:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: write
      packages: write
      pages: write
      pull-requests: write
      repository-projects: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_VAR_region: ${{secrets.AWS_REGION}}
      TF_VAR_DATABASE_URL: ${{secrets.DATABASE_URL}}
      TF_VAR_DOCKER_PASS: ${{aws ecr get-login-password --region ${{secrets.AWS_REGION}}}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install hclq
        run: |
          curl -sSLo install.sh https://install.hclq.sh
          sh install.sh
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform 1.2.3
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.3
          terraform_wrapper: false

      - name: Setup Terraform version
        run: terraform -v

      - name: Setup Terraform wrapper path
        run: which terraform

      - name: Terraform init
        if: contains(steps.changed-files.outputs.modified_files, '${{ env.tf_working_dir }}')
        id: init
        working-directory: ${{ env.tf_working_dir}}
        run: terraform init

      - name: Terraform Init Status
        if: steps.init.outcome == 'failure'
        run: exit 1

      - name: Terraform Plan
        if: contains(steps.changed-files.outputs.modified_files, '${{ env.tf_working_dir }}')
        id: plan
        working-directory: ${{ env.tf_working_dir}}
        run: terraform plan -input=false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: contains(steps.changed-files.outputs.modified_files, '${{ env.tf_working_dir }}') && github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        working-directory: ${{ env.tf_working_dir}}
        run: terraform apply -input=false -auto-approve

      - name: Build Docker
        if: contains(steps.changed-files.outputs.modified_files, '${{ env.python_working_dir }}')
        id: docker-build
        working-directory: ${{ env.python_working_dir}}
        run: |
          aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com
          docker image build -t orca_python_docker:${{github.run_number}} .
          docker tag orca_python_docker:${{github.run_number}} ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/orca_python_docker:${{github.run_number}}
          docker push ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/orca_python_docker:${{github.run_number}}
          docker tag orca_python_docker:${{github.run_number}} ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/orca_python_docker:latest
          docker push ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/orca_python_docker:latest
